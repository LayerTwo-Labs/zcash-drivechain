// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cusf/crypto/v1/crypto.proto
// Protobuf C++ Version: 6.30.1

#ifndef cusf_2fcrypto_2fv1_2fcrypto_2eproto_2epb_2eh
#define cusf_2fcrypto_2fv1_2fcrypto_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6030001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "cusf/common/v1/common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cusf_2fcrypto_2fv1_2fcrypto_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cusf_2fcrypto_2fv1_2fcrypto_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_cusf_2fcrypto_2fv1_2fcrypto_2eproto;
}  // extern "C"
namespace cusf {
namespace crypto {
namespace v1 {
class HmacSha512Request;
struct HmacSha512RequestDefaultTypeInternal;
extern HmacSha512RequestDefaultTypeInternal _HmacSha512Request_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull HmacSha512Request_class_data_;
class HmacSha512Response;
struct HmacSha512ResponseDefaultTypeInternal;
extern HmacSha512ResponseDefaultTypeInternal _HmacSha512Response_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull HmacSha512Response_class_data_;
class Ripemd160Request;
struct Ripemd160RequestDefaultTypeInternal;
extern Ripemd160RequestDefaultTypeInternal _Ripemd160Request_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Ripemd160Request_class_data_;
class Ripemd160Response;
struct Ripemd160ResponseDefaultTypeInternal;
extern Ripemd160ResponseDefaultTypeInternal _Ripemd160Response_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Ripemd160Response_class_data_;
class Secp256k1SecretKeyToPublicKeyRequest;
struct Secp256k1SecretKeyToPublicKeyRequestDefaultTypeInternal;
extern Secp256k1SecretKeyToPublicKeyRequestDefaultTypeInternal _Secp256k1SecretKeyToPublicKeyRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Secp256k1SecretKeyToPublicKeyRequest_class_data_;
class Secp256k1SecretKeyToPublicKeyResponse;
struct Secp256k1SecretKeyToPublicKeyResponseDefaultTypeInternal;
extern Secp256k1SecretKeyToPublicKeyResponseDefaultTypeInternal _Secp256k1SecretKeyToPublicKeyResponse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Secp256k1SecretKeyToPublicKeyResponse_class_data_;
class Secp256k1SignRequest;
struct Secp256k1SignRequestDefaultTypeInternal;
extern Secp256k1SignRequestDefaultTypeInternal _Secp256k1SignRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Secp256k1SignRequest_class_data_;
class Secp256k1SignResponse;
struct Secp256k1SignResponseDefaultTypeInternal;
extern Secp256k1SignResponseDefaultTypeInternal _Secp256k1SignResponse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Secp256k1SignResponse_class_data_;
class Secp256k1VerifyRequest;
struct Secp256k1VerifyRequestDefaultTypeInternal;
extern Secp256k1VerifyRequestDefaultTypeInternal _Secp256k1VerifyRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Secp256k1VerifyRequest_class_data_;
class Secp256k1VerifyResponse;
struct Secp256k1VerifyResponseDefaultTypeInternal;
extern Secp256k1VerifyResponseDefaultTypeInternal _Secp256k1VerifyResponse_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull Secp256k1VerifyResponse_class_data_;
}  // namespace v1
}  // namespace crypto
}  // namespace cusf
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cusf {
namespace crypto {
namespace v1 {

// ===================================================================


// -------------------------------------------------------------------

class Secp256k1VerifyResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cusf.crypto.v1.Secp256k1VerifyResponse) */ {
 public:
  inline Secp256k1VerifyResponse() : Secp256k1VerifyResponse(nullptr) {}
  ~Secp256k1VerifyResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Secp256k1VerifyResponse* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Secp256k1VerifyResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Secp256k1VerifyResponse(::google::protobuf::internal::ConstantInitialized);

  inline Secp256k1VerifyResponse(const Secp256k1VerifyResponse& from) : Secp256k1VerifyResponse(nullptr, from) {}
  inline Secp256k1VerifyResponse(Secp256k1VerifyResponse&& from) noexcept
      : Secp256k1VerifyResponse(nullptr, std::move(from)) {}
  inline Secp256k1VerifyResponse& operator=(const Secp256k1VerifyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Secp256k1VerifyResponse& operator=(Secp256k1VerifyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Secp256k1VerifyResponse& default_instance() {
    return *reinterpret_cast<const Secp256k1VerifyResponse*>(
        &_Secp256k1VerifyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(Secp256k1VerifyResponse& a, Secp256k1VerifyResponse& b) { a.Swap(&b); }
  inline void Swap(Secp256k1VerifyResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Secp256k1VerifyResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Secp256k1VerifyResponse* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Secp256k1VerifyResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Secp256k1VerifyResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Secp256k1VerifyResponse& from) { Secp256k1VerifyResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Secp256k1VerifyResponse* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cusf.crypto.v1.Secp256k1VerifyResponse"; }

 protected:
  explicit Secp256k1VerifyResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Secp256k1VerifyResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Secp256k1VerifyResponse& from);
  Secp256k1VerifyResponse(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Secp256k1VerifyResponse&& from) noexcept
      : Secp256k1VerifyResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValidFieldNumber = 1,
  };
  // bool valid = 1 [json_name = "valid"];
  void clear_valid() ;
  bool valid() const;
  void set_valid(bool value);

  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);

  public:
  // @@protoc_insertion_point(class_scope:cusf.crypto.v1.Secp256k1VerifyResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Secp256k1VerifyResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    bool valid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cusf_2fcrypto_2fv1_2fcrypto_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Secp256k1VerifyResponse_class_data_;
// -------------------------------------------------------------------

class Secp256k1VerifyRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cusf.crypto.v1.Secp256k1VerifyRequest) */ {
 public:
  inline Secp256k1VerifyRequest() : Secp256k1VerifyRequest(nullptr) {}
  ~Secp256k1VerifyRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Secp256k1VerifyRequest* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Secp256k1VerifyRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Secp256k1VerifyRequest(::google::protobuf::internal::ConstantInitialized);

  inline Secp256k1VerifyRequest(const Secp256k1VerifyRequest& from) : Secp256k1VerifyRequest(nullptr, from) {}
  inline Secp256k1VerifyRequest(Secp256k1VerifyRequest&& from) noexcept
      : Secp256k1VerifyRequest(nullptr, std::move(from)) {}
  inline Secp256k1VerifyRequest& operator=(const Secp256k1VerifyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Secp256k1VerifyRequest& operator=(Secp256k1VerifyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Secp256k1VerifyRequest& default_instance() {
    return *reinterpret_cast<const Secp256k1VerifyRequest*>(
        &_Secp256k1VerifyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(Secp256k1VerifyRequest& a, Secp256k1VerifyRequest& b) { a.Swap(&b); }
  inline void Swap(Secp256k1VerifyRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Secp256k1VerifyRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Secp256k1VerifyRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Secp256k1VerifyRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Secp256k1VerifyRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Secp256k1VerifyRequest& from) { Secp256k1VerifyRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Secp256k1VerifyRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cusf.crypto.v1.Secp256k1VerifyRequest"; }

 protected:
  explicit Secp256k1VerifyRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Secp256k1VerifyRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Secp256k1VerifyRequest& from);
  Secp256k1VerifyRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Secp256k1VerifyRequest&& from) noexcept
      : Secp256k1VerifyRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 1,
    kSignatureFieldNumber = 2,
    kPublicKeyFieldNumber = 3,
  };
  // .cusf.common.v1.Hex message = 1 [json_name = "message"];
  bool has_message() const;
  void clear_message() ;
  const ::cusf::common::v1::Hex& message() const;
  [[nodiscard]] ::cusf::common::v1::Hex* PROTOBUF_NULLABLE release_message();
  ::cusf::common::v1::Hex* PROTOBUF_NONNULL mutable_message();
  void set_allocated_message(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_message(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value);
  ::cusf::common::v1::Hex* PROTOBUF_NULLABLE unsafe_arena_release_message();

  private:
  const ::cusf::common::v1::Hex& _internal_message() const;
  ::cusf::common::v1::Hex* PROTOBUF_NONNULL _internal_mutable_message();

  public:
  // .cusf.common.v1.Hex signature = 2 [json_name = "signature"];
  bool has_signature() const;
  void clear_signature() ;
  const ::cusf::common::v1::Hex& signature() const;
  [[nodiscard]] ::cusf::common::v1::Hex* PROTOBUF_NULLABLE release_signature();
  ::cusf::common::v1::Hex* PROTOBUF_NONNULL mutable_signature();
  void set_allocated_signature(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_signature(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value);
  ::cusf::common::v1::Hex* PROTOBUF_NULLABLE unsafe_arena_release_signature();

  private:
  const ::cusf::common::v1::Hex& _internal_signature() const;
  ::cusf::common::v1::Hex* PROTOBUF_NONNULL _internal_mutable_signature();

  public:
  // .cusf.common.v1.ConsensusHex public_key = 3 [json_name = "publicKey"];
  bool has_public_key() const;
  void clear_public_key() ;
  const ::cusf::common::v1::ConsensusHex& public_key() const;
  [[nodiscard]] ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE release_public_key();
  ::cusf::common::v1::ConsensusHex* PROTOBUF_NONNULL mutable_public_key();
  void set_allocated_public_key(::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_public_key(::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE value);
  ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE unsafe_arena_release_public_key();

  private:
  const ::cusf::common::v1::ConsensusHex& _internal_public_key() const;
  ::cusf::common::v1::ConsensusHex* PROTOBUF_NONNULL _internal_mutable_public_key();

  public:
  // @@protoc_insertion_point(class_scope:cusf.crypto.v1.Secp256k1VerifyRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   3, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Secp256k1VerifyRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cusf::common::v1::Hex* PROTOBUF_NULLABLE message_;
    ::cusf::common::v1::Hex* PROTOBUF_NULLABLE signature_;
    ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE public_key_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cusf_2fcrypto_2fv1_2fcrypto_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Secp256k1VerifyRequest_class_data_;
// -------------------------------------------------------------------

class Secp256k1SignResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cusf.crypto.v1.Secp256k1SignResponse) */ {
 public:
  inline Secp256k1SignResponse() : Secp256k1SignResponse(nullptr) {}
  ~Secp256k1SignResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Secp256k1SignResponse* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Secp256k1SignResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Secp256k1SignResponse(::google::protobuf::internal::ConstantInitialized);

  inline Secp256k1SignResponse(const Secp256k1SignResponse& from) : Secp256k1SignResponse(nullptr, from) {}
  inline Secp256k1SignResponse(Secp256k1SignResponse&& from) noexcept
      : Secp256k1SignResponse(nullptr, std::move(from)) {}
  inline Secp256k1SignResponse& operator=(const Secp256k1SignResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Secp256k1SignResponse& operator=(Secp256k1SignResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Secp256k1SignResponse& default_instance() {
    return *reinterpret_cast<const Secp256k1SignResponse*>(
        &_Secp256k1SignResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(Secp256k1SignResponse& a, Secp256k1SignResponse& b) { a.Swap(&b); }
  inline void Swap(Secp256k1SignResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Secp256k1SignResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Secp256k1SignResponse* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Secp256k1SignResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Secp256k1SignResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Secp256k1SignResponse& from) { Secp256k1SignResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Secp256k1SignResponse* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cusf.crypto.v1.Secp256k1SignResponse"; }

 protected:
  explicit Secp256k1SignResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Secp256k1SignResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Secp256k1SignResponse& from);
  Secp256k1SignResponse(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Secp256k1SignResponse&& from) noexcept
      : Secp256k1SignResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSignatureFieldNumber = 1,
  };
  // .cusf.common.v1.Hex signature = 1 [json_name = "signature"];
  bool has_signature() const;
  void clear_signature() ;
  const ::cusf::common::v1::Hex& signature() const;
  [[nodiscard]] ::cusf::common::v1::Hex* PROTOBUF_NULLABLE release_signature();
  ::cusf::common::v1::Hex* PROTOBUF_NONNULL mutable_signature();
  void set_allocated_signature(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_signature(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value);
  ::cusf::common::v1::Hex* PROTOBUF_NULLABLE unsafe_arena_release_signature();

  private:
  const ::cusf::common::v1::Hex& _internal_signature() const;
  ::cusf::common::v1::Hex* PROTOBUF_NONNULL _internal_mutable_signature();

  public:
  // @@protoc_insertion_point(class_scope:cusf.crypto.v1.Secp256k1SignResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Secp256k1SignResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cusf::common::v1::Hex* PROTOBUF_NULLABLE signature_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cusf_2fcrypto_2fv1_2fcrypto_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Secp256k1SignResponse_class_data_;
// -------------------------------------------------------------------

class Secp256k1SignRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cusf.crypto.v1.Secp256k1SignRequest) */ {
 public:
  inline Secp256k1SignRequest() : Secp256k1SignRequest(nullptr) {}
  ~Secp256k1SignRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Secp256k1SignRequest* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Secp256k1SignRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Secp256k1SignRequest(::google::protobuf::internal::ConstantInitialized);

  inline Secp256k1SignRequest(const Secp256k1SignRequest& from) : Secp256k1SignRequest(nullptr, from) {}
  inline Secp256k1SignRequest(Secp256k1SignRequest&& from) noexcept
      : Secp256k1SignRequest(nullptr, std::move(from)) {}
  inline Secp256k1SignRequest& operator=(const Secp256k1SignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Secp256k1SignRequest& operator=(Secp256k1SignRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Secp256k1SignRequest& default_instance() {
    return *reinterpret_cast<const Secp256k1SignRequest*>(
        &_Secp256k1SignRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(Secp256k1SignRequest& a, Secp256k1SignRequest& b) { a.Swap(&b); }
  inline void Swap(Secp256k1SignRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Secp256k1SignRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Secp256k1SignRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Secp256k1SignRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Secp256k1SignRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Secp256k1SignRequest& from) { Secp256k1SignRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Secp256k1SignRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cusf.crypto.v1.Secp256k1SignRequest"; }

 protected:
  explicit Secp256k1SignRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Secp256k1SignRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Secp256k1SignRequest& from);
  Secp256k1SignRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Secp256k1SignRequest&& from) noexcept
      : Secp256k1SignRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMessageFieldNumber = 1,
    kSecretKeyFieldNumber = 2,
  };
  // .cusf.common.v1.Hex message = 1 [json_name = "message"];
  bool has_message() const;
  void clear_message() ;
  const ::cusf::common::v1::Hex& message() const;
  [[nodiscard]] ::cusf::common::v1::Hex* PROTOBUF_NULLABLE release_message();
  ::cusf::common::v1::Hex* PROTOBUF_NONNULL mutable_message();
  void set_allocated_message(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_message(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value);
  ::cusf::common::v1::Hex* PROTOBUF_NULLABLE unsafe_arena_release_message();

  private:
  const ::cusf::common::v1::Hex& _internal_message() const;
  ::cusf::common::v1::Hex* PROTOBUF_NONNULL _internal_mutable_message();

  public:
  // .cusf.common.v1.ConsensusHex secret_key = 2 [json_name = "secretKey"];
  bool has_secret_key() const;
  void clear_secret_key() ;
  const ::cusf::common::v1::ConsensusHex& secret_key() const;
  [[nodiscard]] ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE release_secret_key();
  ::cusf::common::v1::ConsensusHex* PROTOBUF_NONNULL mutable_secret_key();
  void set_allocated_secret_key(::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_secret_key(::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE value);
  ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE unsafe_arena_release_secret_key();

  private:
  const ::cusf::common::v1::ConsensusHex& _internal_secret_key() const;
  ::cusf::common::v1::ConsensusHex* PROTOBUF_NONNULL _internal_mutable_secret_key();

  public:
  // @@protoc_insertion_point(class_scope:cusf.crypto.v1.Secp256k1SignRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Secp256k1SignRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cusf::common::v1::Hex* PROTOBUF_NULLABLE message_;
    ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE secret_key_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cusf_2fcrypto_2fv1_2fcrypto_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Secp256k1SignRequest_class_data_;
// -------------------------------------------------------------------

class Secp256k1SecretKeyToPublicKeyResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cusf.crypto.v1.Secp256k1SecretKeyToPublicKeyResponse) */ {
 public:
  inline Secp256k1SecretKeyToPublicKeyResponse() : Secp256k1SecretKeyToPublicKeyResponse(nullptr) {}
  ~Secp256k1SecretKeyToPublicKeyResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Secp256k1SecretKeyToPublicKeyResponse* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Secp256k1SecretKeyToPublicKeyResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Secp256k1SecretKeyToPublicKeyResponse(::google::protobuf::internal::ConstantInitialized);

  inline Secp256k1SecretKeyToPublicKeyResponse(const Secp256k1SecretKeyToPublicKeyResponse& from) : Secp256k1SecretKeyToPublicKeyResponse(nullptr, from) {}
  inline Secp256k1SecretKeyToPublicKeyResponse(Secp256k1SecretKeyToPublicKeyResponse&& from) noexcept
      : Secp256k1SecretKeyToPublicKeyResponse(nullptr, std::move(from)) {}
  inline Secp256k1SecretKeyToPublicKeyResponse& operator=(const Secp256k1SecretKeyToPublicKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline Secp256k1SecretKeyToPublicKeyResponse& operator=(Secp256k1SecretKeyToPublicKeyResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Secp256k1SecretKeyToPublicKeyResponse& default_instance() {
    return *reinterpret_cast<const Secp256k1SecretKeyToPublicKeyResponse*>(
        &_Secp256k1SecretKeyToPublicKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Secp256k1SecretKeyToPublicKeyResponse& a, Secp256k1SecretKeyToPublicKeyResponse& b) { a.Swap(&b); }
  inline void Swap(Secp256k1SecretKeyToPublicKeyResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Secp256k1SecretKeyToPublicKeyResponse* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Secp256k1SecretKeyToPublicKeyResponse* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Secp256k1SecretKeyToPublicKeyResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Secp256k1SecretKeyToPublicKeyResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Secp256k1SecretKeyToPublicKeyResponse& from) { Secp256k1SecretKeyToPublicKeyResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Secp256k1SecretKeyToPublicKeyResponse* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cusf.crypto.v1.Secp256k1SecretKeyToPublicKeyResponse"; }

 protected:
  explicit Secp256k1SecretKeyToPublicKeyResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Secp256k1SecretKeyToPublicKeyResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Secp256k1SecretKeyToPublicKeyResponse& from);
  Secp256k1SecretKeyToPublicKeyResponse(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Secp256k1SecretKeyToPublicKeyResponse&& from) noexcept
      : Secp256k1SecretKeyToPublicKeyResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPublicKeyFieldNumber = 1,
  };
  // .cusf.common.v1.ConsensusHex public_key = 1 [json_name = "publicKey"];
  bool has_public_key() const;
  void clear_public_key() ;
  const ::cusf::common::v1::ConsensusHex& public_key() const;
  [[nodiscard]] ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE release_public_key();
  ::cusf::common::v1::ConsensusHex* PROTOBUF_NONNULL mutable_public_key();
  void set_allocated_public_key(::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_public_key(::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE value);
  ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE unsafe_arena_release_public_key();

  private:
  const ::cusf::common::v1::ConsensusHex& _internal_public_key() const;
  ::cusf::common::v1::ConsensusHex* PROTOBUF_NONNULL _internal_mutable_public_key();

  public:
  // @@protoc_insertion_point(class_scope:cusf.crypto.v1.Secp256k1SecretKeyToPublicKeyResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Secp256k1SecretKeyToPublicKeyResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE public_key_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cusf_2fcrypto_2fv1_2fcrypto_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Secp256k1SecretKeyToPublicKeyResponse_class_data_;
// -------------------------------------------------------------------

class Secp256k1SecretKeyToPublicKeyRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cusf.crypto.v1.Secp256k1SecretKeyToPublicKeyRequest) */ {
 public:
  inline Secp256k1SecretKeyToPublicKeyRequest() : Secp256k1SecretKeyToPublicKeyRequest(nullptr) {}
  ~Secp256k1SecretKeyToPublicKeyRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Secp256k1SecretKeyToPublicKeyRequest* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Secp256k1SecretKeyToPublicKeyRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Secp256k1SecretKeyToPublicKeyRequest(::google::protobuf::internal::ConstantInitialized);

  inline Secp256k1SecretKeyToPublicKeyRequest(const Secp256k1SecretKeyToPublicKeyRequest& from) : Secp256k1SecretKeyToPublicKeyRequest(nullptr, from) {}
  inline Secp256k1SecretKeyToPublicKeyRequest(Secp256k1SecretKeyToPublicKeyRequest&& from) noexcept
      : Secp256k1SecretKeyToPublicKeyRequest(nullptr, std::move(from)) {}
  inline Secp256k1SecretKeyToPublicKeyRequest& operator=(const Secp256k1SecretKeyToPublicKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Secp256k1SecretKeyToPublicKeyRequest& operator=(Secp256k1SecretKeyToPublicKeyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Secp256k1SecretKeyToPublicKeyRequest& default_instance() {
    return *reinterpret_cast<const Secp256k1SecretKeyToPublicKeyRequest*>(
        &_Secp256k1SecretKeyToPublicKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(Secp256k1SecretKeyToPublicKeyRequest& a, Secp256k1SecretKeyToPublicKeyRequest& b) { a.Swap(&b); }
  inline void Swap(Secp256k1SecretKeyToPublicKeyRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Secp256k1SecretKeyToPublicKeyRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Secp256k1SecretKeyToPublicKeyRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Secp256k1SecretKeyToPublicKeyRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Secp256k1SecretKeyToPublicKeyRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Secp256k1SecretKeyToPublicKeyRequest& from) { Secp256k1SecretKeyToPublicKeyRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Secp256k1SecretKeyToPublicKeyRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cusf.crypto.v1.Secp256k1SecretKeyToPublicKeyRequest"; }

 protected:
  explicit Secp256k1SecretKeyToPublicKeyRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Secp256k1SecretKeyToPublicKeyRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Secp256k1SecretKeyToPublicKeyRequest& from);
  Secp256k1SecretKeyToPublicKeyRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Secp256k1SecretKeyToPublicKeyRequest&& from) noexcept
      : Secp256k1SecretKeyToPublicKeyRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSecretKeyFieldNumber = 1,
  };
  // .cusf.common.v1.ConsensusHex secret_key = 1 [json_name = "secretKey"];
  bool has_secret_key() const;
  void clear_secret_key() ;
  const ::cusf::common::v1::ConsensusHex& secret_key() const;
  [[nodiscard]] ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE release_secret_key();
  ::cusf::common::v1::ConsensusHex* PROTOBUF_NONNULL mutable_secret_key();
  void set_allocated_secret_key(::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_secret_key(::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE value);
  ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE unsafe_arena_release_secret_key();

  private:
  const ::cusf::common::v1::ConsensusHex& _internal_secret_key() const;
  ::cusf::common::v1::ConsensusHex* PROTOBUF_NONNULL _internal_mutable_secret_key();

  public:
  // @@protoc_insertion_point(class_scope:cusf.crypto.v1.Secp256k1SecretKeyToPublicKeyRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Secp256k1SecretKeyToPublicKeyRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE secret_key_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cusf_2fcrypto_2fv1_2fcrypto_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Secp256k1SecretKeyToPublicKeyRequest_class_data_;
// -------------------------------------------------------------------

class Ripemd160Response final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cusf.crypto.v1.Ripemd160Response) */ {
 public:
  inline Ripemd160Response() : Ripemd160Response(nullptr) {}
  ~Ripemd160Response() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Ripemd160Response* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Ripemd160Response));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Ripemd160Response(::google::protobuf::internal::ConstantInitialized);

  inline Ripemd160Response(const Ripemd160Response& from) : Ripemd160Response(nullptr, from) {}
  inline Ripemd160Response(Ripemd160Response&& from) noexcept
      : Ripemd160Response(nullptr, std::move(from)) {}
  inline Ripemd160Response& operator=(const Ripemd160Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ripemd160Response& operator=(Ripemd160Response&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ripemd160Response& default_instance() {
    return *reinterpret_cast<const Ripemd160Response*>(
        &_Ripemd160Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(Ripemd160Response& a, Ripemd160Response& b) { a.Swap(&b); }
  inline void Swap(Ripemd160Response* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ripemd160Response* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ripemd160Response* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Ripemd160Response>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Ripemd160Response& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Ripemd160Response& from) { Ripemd160Response::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Ripemd160Response* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cusf.crypto.v1.Ripemd160Response"; }

 protected:
  explicit Ripemd160Response(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Ripemd160Response(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Ripemd160Response& from);
  Ripemd160Response(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Ripemd160Response&& from) noexcept
      : Ripemd160Response(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDigestFieldNumber = 1,
  };
  // .cusf.common.v1.Hex digest = 1 [json_name = "digest"];
  bool has_digest() const;
  void clear_digest() ;
  const ::cusf::common::v1::Hex& digest() const;
  [[nodiscard]] ::cusf::common::v1::Hex* PROTOBUF_NULLABLE release_digest();
  ::cusf::common::v1::Hex* PROTOBUF_NONNULL mutable_digest();
  void set_allocated_digest(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_digest(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value);
  ::cusf::common::v1::Hex* PROTOBUF_NULLABLE unsafe_arena_release_digest();

  private:
  const ::cusf::common::v1::Hex& _internal_digest() const;
  ::cusf::common::v1::Hex* PROTOBUF_NONNULL _internal_mutable_digest();

  public:
  // @@protoc_insertion_point(class_scope:cusf.crypto.v1.Ripemd160Response)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Ripemd160Response& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cusf::common::v1::Hex* PROTOBUF_NULLABLE digest_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cusf_2fcrypto_2fv1_2fcrypto_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Ripemd160Response_class_data_;
// -------------------------------------------------------------------

class Ripemd160Request final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cusf.crypto.v1.Ripemd160Request) */ {
 public:
  inline Ripemd160Request() : Ripemd160Request(nullptr) {}
  ~Ripemd160Request() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Ripemd160Request* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Ripemd160Request));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Ripemd160Request(::google::protobuf::internal::ConstantInitialized);

  inline Ripemd160Request(const Ripemd160Request& from) : Ripemd160Request(nullptr, from) {}
  inline Ripemd160Request(Ripemd160Request&& from) noexcept
      : Ripemd160Request(nullptr, std::move(from)) {}
  inline Ripemd160Request& operator=(const Ripemd160Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ripemd160Request& operator=(Ripemd160Request&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ripemd160Request& default_instance() {
    return *reinterpret_cast<const Ripemd160Request*>(
        &_Ripemd160Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Ripemd160Request& a, Ripemd160Request& b) { a.Swap(&b); }
  inline void Swap(Ripemd160Request* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ripemd160Request* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ripemd160Request* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Ripemd160Request>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Ripemd160Request& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Ripemd160Request& from) { Ripemd160Request::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Ripemd160Request* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cusf.crypto.v1.Ripemd160Request"; }

 protected:
  explicit Ripemd160Request(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  Ripemd160Request(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Ripemd160Request& from);
  Ripemd160Request(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, Ripemd160Request&& from) noexcept
      : Ripemd160Request(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMsgFieldNumber = 1,
  };
  // .cusf.common.v1.Hex msg = 1 [json_name = "msg"];
  bool has_msg() const;
  void clear_msg() ;
  const ::cusf::common::v1::Hex& msg() const;
  [[nodiscard]] ::cusf::common::v1::Hex* PROTOBUF_NULLABLE release_msg();
  ::cusf::common::v1::Hex* PROTOBUF_NONNULL mutable_msg();
  void set_allocated_msg(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_msg(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value);
  ::cusf::common::v1::Hex* PROTOBUF_NULLABLE unsafe_arena_release_msg();

  private:
  const ::cusf::common::v1::Hex& _internal_msg() const;
  ::cusf::common::v1::Hex* PROTOBUF_NONNULL _internal_mutable_msg();

  public:
  // @@protoc_insertion_point(class_scope:cusf.crypto.v1.Ripemd160Request)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const Ripemd160Request& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cusf::common::v1::Hex* PROTOBUF_NULLABLE msg_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cusf_2fcrypto_2fv1_2fcrypto_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull Ripemd160Request_class_data_;
// -------------------------------------------------------------------

class HmacSha512Response final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cusf.crypto.v1.HmacSha512Response) */ {
 public:
  inline HmacSha512Response() : HmacSha512Response(nullptr) {}
  ~HmacSha512Response() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HmacSha512Response* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HmacSha512Response));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HmacSha512Response(::google::protobuf::internal::ConstantInitialized);

  inline HmacSha512Response(const HmacSha512Response& from) : HmacSha512Response(nullptr, from) {}
  inline HmacSha512Response(HmacSha512Response&& from) noexcept
      : HmacSha512Response(nullptr, std::move(from)) {}
  inline HmacSha512Response& operator=(const HmacSha512Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline HmacSha512Response& operator=(HmacSha512Response&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HmacSha512Response& default_instance() {
    return *reinterpret_cast<const HmacSha512Response*>(
        &_HmacSha512Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(HmacSha512Response& a, HmacSha512Response& b) { a.Swap(&b); }
  inline void Swap(HmacSha512Response* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HmacSha512Response* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HmacSha512Response* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HmacSha512Response>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HmacSha512Response& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HmacSha512Response& from) { HmacSha512Response::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HmacSha512Response* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cusf.crypto.v1.HmacSha512Response"; }

 protected:
  explicit HmacSha512Response(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  HmacSha512Response(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const HmacSha512Response& from);
  HmacSha512Response(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, HmacSha512Response&& from) noexcept
      : HmacSha512Response(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kHmacFieldNumber = 1,
  };
  // .cusf.common.v1.Hex hmac = 1 [json_name = "hmac"];
  bool has_hmac() const;
  void clear_hmac() ;
  const ::cusf::common::v1::Hex& hmac() const;
  [[nodiscard]] ::cusf::common::v1::Hex* PROTOBUF_NULLABLE release_hmac();
  ::cusf::common::v1::Hex* PROTOBUF_NONNULL mutable_hmac();
  void set_allocated_hmac(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_hmac(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value);
  ::cusf::common::v1::Hex* PROTOBUF_NULLABLE unsafe_arena_release_hmac();

  private:
  const ::cusf::common::v1::Hex& _internal_hmac() const;
  ::cusf::common::v1::Hex* PROTOBUF_NONNULL _internal_mutable_hmac();

  public:
  // @@protoc_insertion_point(class_scope:cusf.crypto.v1.HmacSha512Response)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const HmacSha512Response& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cusf::common::v1::Hex* PROTOBUF_NULLABLE hmac_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cusf_2fcrypto_2fv1_2fcrypto_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull HmacSha512Response_class_data_;
// -------------------------------------------------------------------

class HmacSha512Request final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cusf.crypto.v1.HmacSha512Request) */ {
 public:
  inline HmacSha512Request() : HmacSha512Request(nullptr) {}
  ~HmacSha512Request() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HmacSha512Request* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HmacSha512Request));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HmacSha512Request(::google::protobuf::internal::ConstantInitialized);

  inline HmacSha512Request(const HmacSha512Request& from) : HmacSha512Request(nullptr, from) {}
  inline HmacSha512Request(HmacSha512Request&& from) noexcept
      : HmacSha512Request(nullptr, std::move(from)) {}
  inline HmacSha512Request& operator=(const HmacSha512Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline HmacSha512Request& operator=(HmacSha512Request&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HmacSha512Request& default_instance() {
    return *reinterpret_cast<const HmacSha512Request*>(
        &_HmacSha512Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(HmacSha512Request& a, HmacSha512Request& b) { a.Swap(&b); }
  inline void Swap(HmacSha512Request* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HmacSha512Request* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HmacSha512Request* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HmacSha512Request>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HmacSha512Request& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HmacSha512Request& from) { HmacSha512Request::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HmacSha512Request* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "cusf.crypto.v1.HmacSha512Request"; }

 protected:
  explicit HmacSha512Request(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  HmacSha512Request(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const HmacSha512Request& from);
  HmacSha512Request(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, HmacSha512Request&& from) noexcept
      : HmacSha512Request(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 1,
    kMsgFieldNumber = 2,
  };
  // .cusf.common.v1.Hex key = 1 [json_name = "key"];
  bool has_key() const;
  void clear_key() ;
  const ::cusf::common::v1::Hex& key() const;
  [[nodiscard]] ::cusf::common::v1::Hex* PROTOBUF_NULLABLE release_key();
  ::cusf::common::v1::Hex* PROTOBUF_NONNULL mutable_key();
  void set_allocated_key(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_key(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value);
  ::cusf::common::v1::Hex* PROTOBUF_NULLABLE unsafe_arena_release_key();

  private:
  const ::cusf::common::v1::Hex& _internal_key() const;
  ::cusf::common::v1::Hex* PROTOBUF_NONNULL _internal_mutable_key();

  public:
  // .cusf.common.v1.Hex msg = 2 [json_name = "msg"];
  bool has_msg() const;
  void clear_msg() ;
  const ::cusf::common::v1::Hex& msg() const;
  [[nodiscard]] ::cusf::common::v1::Hex* PROTOBUF_NULLABLE release_msg();
  ::cusf::common::v1::Hex* PROTOBUF_NONNULL mutable_msg();
  void set_allocated_msg(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_msg(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value);
  ::cusf::common::v1::Hex* PROTOBUF_NULLABLE unsafe_arena_release_msg();

  private:
  const ::cusf::common::v1::Hex& _internal_msg() const;
  ::cusf::common::v1::Hex* PROTOBUF_NONNULL _internal_mutable_msg();

  public:
  // @@protoc_insertion_point(class_scope:cusf.crypto.v1.HmacSha512Request)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const HmacSha512Request& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::cusf::common::v1::Hex* PROTOBUF_NULLABLE key_;
    ::cusf::common::v1::Hex* PROTOBUF_NULLABLE msg_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cusf_2fcrypto_2fv1_2fcrypto_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull HmacSha512Request_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// HmacSha512Request

// .cusf.common.v1.Hex key = 1 [json_name = "key"];
inline bool HmacSha512Request::has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.key_ != nullptr);
  return value;
}
inline const ::cusf::common::v1::Hex& HmacSha512Request::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cusf::common::v1::Hex* p = _impl_.key_;
  return p != nullptr ? *p : reinterpret_cast<const ::cusf::common::v1::Hex&>(::cusf::common::v1::_Hex_default_instance_);
}
inline const ::cusf::common::v1::Hex& HmacSha512Request::key() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cusf.crypto.v1.HmacSha512Request.key)
  return _internal_key();
}
inline void HmacSha512Request::unsafe_arena_set_allocated_key(
    ::cusf::common::v1::Hex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.key_);
  }
  _impl_.key_ = reinterpret_cast<::cusf::common::v1::Hex*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cusf.crypto.v1.HmacSha512Request.key)
}
inline ::cusf::common::v1::Hex* PROTOBUF_NULLABLE HmacSha512Request::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cusf::common::v1::Hex* released = _impl_.key_;
  _impl_.key_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NULLABLE HmacSha512Request::unsafe_arena_release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cusf.crypto.v1.HmacSha512Request.key)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cusf::common::v1::Hex* temp = _impl_.key_;
  _impl_.key_ = nullptr;
  return temp;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NONNULL HmacSha512Request::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.key_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cusf::common::v1::Hex>(GetArena());
    _impl_.key_ = reinterpret_cast<::cusf::common::v1::Hex*>(p);
  }
  return _impl_.key_;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NONNULL HmacSha512Request::mutable_key()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cusf::common::v1::Hex* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:cusf.crypto.v1.HmacSha512Request.key)
  return _msg;
}
inline void HmacSha512Request::set_allocated_key(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.key_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.key_ = reinterpret_cast<::cusf::common::v1::Hex*>(value);
  // @@protoc_insertion_point(field_set_allocated:cusf.crypto.v1.HmacSha512Request.key)
}

// .cusf.common.v1.Hex msg = 2 [json_name = "msg"];
inline bool HmacSha512Request::has_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.msg_ != nullptr);
  return value;
}
inline const ::cusf::common::v1::Hex& HmacSha512Request::_internal_msg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cusf::common::v1::Hex* p = _impl_.msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::cusf::common::v1::Hex&>(::cusf::common::v1::_Hex_default_instance_);
}
inline const ::cusf::common::v1::Hex& HmacSha512Request::msg() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cusf.crypto.v1.HmacSha512Request.msg)
  return _internal_msg();
}
inline void HmacSha512Request::unsafe_arena_set_allocated_msg(
    ::cusf::common::v1::Hex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.msg_);
  }
  _impl_.msg_ = reinterpret_cast<::cusf::common::v1::Hex*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cusf.crypto.v1.HmacSha512Request.msg)
}
inline ::cusf::common::v1::Hex* PROTOBUF_NULLABLE HmacSha512Request::release_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cusf::common::v1::Hex* released = _impl_.msg_;
  _impl_.msg_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NULLABLE HmacSha512Request::unsafe_arena_release_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cusf.crypto.v1.HmacSha512Request.msg)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cusf::common::v1::Hex* temp = _impl_.msg_;
  _impl_.msg_ = nullptr;
  return temp;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NONNULL HmacSha512Request::_internal_mutable_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.msg_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cusf::common::v1::Hex>(GetArena());
    _impl_.msg_ = reinterpret_cast<::cusf::common::v1::Hex*>(p);
  }
  return _impl_.msg_;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NONNULL HmacSha512Request::mutable_msg()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::cusf::common::v1::Hex* _msg = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:cusf.crypto.v1.HmacSha512Request.msg)
  return _msg;
}
inline void HmacSha512Request::set_allocated_msg(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.msg_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.msg_ = reinterpret_cast<::cusf::common::v1::Hex*>(value);
  // @@protoc_insertion_point(field_set_allocated:cusf.crypto.v1.HmacSha512Request.msg)
}

// -------------------------------------------------------------------

// HmacSha512Response

// .cusf.common.v1.Hex hmac = 1 [json_name = "hmac"];
inline bool HmacSha512Response::has_hmac() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.hmac_ != nullptr);
  return value;
}
inline const ::cusf::common::v1::Hex& HmacSha512Response::_internal_hmac() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cusf::common::v1::Hex* p = _impl_.hmac_;
  return p != nullptr ? *p : reinterpret_cast<const ::cusf::common::v1::Hex&>(::cusf::common::v1::_Hex_default_instance_);
}
inline const ::cusf::common::v1::Hex& HmacSha512Response::hmac() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cusf.crypto.v1.HmacSha512Response.hmac)
  return _internal_hmac();
}
inline void HmacSha512Response::unsafe_arena_set_allocated_hmac(
    ::cusf::common::v1::Hex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hmac_);
  }
  _impl_.hmac_ = reinterpret_cast<::cusf::common::v1::Hex*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cusf.crypto.v1.HmacSha512Response.hmac)
}
inline ::cusf::common::v1::Hex* PROTOBUF_NULLABLE HmacSha512Response::release_hmac() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cusf::common::v1::Hex* released = _impl_.hmac_;
  _impl_.hmac_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NULLABLE HmacSha512Response::unsafe_arena_release_hmac() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cusf.crypto.v1.HmacSha512Response.hmac)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cusf::common::v1::Hex* temp = _impl_.hmac_;
  _impl_.hmac_ = nullptr;
  return temp;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NONNULL HmacSha512Response::_internal_mutable_hmac() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.hmac_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cusf::common::v1::Hex>(GetArena());
    _impl_.hmac_ = reinterpret_cast<::cusf::common::v1::Hex*>(p);
  }
  return _impl_.hmac_;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NONNULL HmacSha512Response::mutable_hmac()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cusf::common::v1::Hex* _msg = _internal_mutable_hmac();
  // @@protoc_insertion_point(field_mutable:cusf.crypto.v1.HmacSha512Response.hmac)
  return _msg;
}
inline void HmacSha512Response::set_allocated_hmac(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.hmac_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.hmac_ = reinterpret_cast<::cusf::common::v1::Hex*>(value);
  // @@protoc_insertion_point(field_set_allocated:cusf.crypto.v1.HmacSha512Response.hmac)
}

// -------------------------------------------------------------------

// Ripemd160Request

// .cusf.common.v1.Hex msg = 1 [json_name = "msg"];
inline bool Ripemd160Request::has_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.msg_ != nullptr);
  return value;
}
inline const ::cusf::common::v1::Hex& Ripemd160Request::_internal_msg() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cusf::common::v1::Hex* p = _impl_.msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::cusf::common::v1::Hex&>(::cusf::common::v1::_Hex_default_instance_);
}
inline const ::cusf::common::v1::Hex& Ripemd160Request::msg() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cusf.crypto.v1.Ripemd160Request.msg)
  return _internal_msg();
}
inline void Ripemd160Request::unsafe_arena_set_allocated_msg(
    ::cusf::common::v1::Hex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.msg_);
  }
  _impl_.msg_ = reinterpret_cast<::cusf::common::v1::Hex*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cusf.crypto.v1.Ripemd160Request.msg)
}
inline ::cusf::common::v1::Hex* PROTOBUF_NULLABLE Ripemd160Request::release_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cusf::common::v1::Hex* released = _impl_.msg_;
  _impl_.msg_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NULLABLE Ripemd160Request::unsafe_arena_release_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cusf.crypto.v1.Ripemd160Request.msg)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cusf::common::v1::Hex* temp = _impl_.msg_;
  _impl_.msg_ = nullptr;
  return temp;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NONNULL Ripemd160Request::_internal_mutable_msg() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.msg_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cusf::common::v1::Hex>(GetArena());
    _impl_.msg_ = reinterpret_cast<::cusf::common::v1::Hex*>(p);
  }
  return _impl_.msg_;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NONNULL Ripemd160Request::mutable_msg()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cusf::common::v1::Hex* _msg = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:cusf.crypto.v1.Ripemd160Request.msg)
  return _msg;
}
inline void Ripemd160Request::set_allocated_msg(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.msg_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.msg_ = reinterpret_cast<::cusf::common::v1::Hex*>(value);
  // @@protoc_insertion_point(field_set_allocated:cusf.crypto.v1.Ripemd160Request.msg)
}

// -------------------------------------------------------------------

// Ripemd160Response

// .cusf.common.v1.Hex digest = 1 [json_name = "digest"];
inline bool Ripemd160Response::has_digest() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.digest_ != nullptr);
  return value;
}
inline const ::cusf::common::v1::Hex& Ripemd160Response::_internal_digest() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cusf::common::v1::Hex* p = _impl_.digest_;
  return p != nullptr ? *p : reinterpret_cast<const ::cusf::common::v1::Hex&>(::cusf::common::v1::_Hex_default_instance_);
}
inline const ::cusf::common::v1::Hex& Ripemd160Response::digest() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cusf.crypto.v1.Ripemd160Response.digest)
  return _internal_digest();
}
inline void Ripemd160Response::unsafe_arena_set_allocated_digest(
    ::cusf::common::v1::Hex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.digest_);
  }
  _impl_.digest_ = reinterpret_cast<::cusf::common::v1::Hex*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cusf.crypto.v1.Ripemd160Response.digest)
}
inline ::cusf::common::v1::Hex* PROTOBUF_NULLABLE Ripemd160Response::release_digest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cusf::common::v1::Hex* released = _impl_.digest_;
  _impl_.digest_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NULLABLE Ripemd160Response::unsafe_arena_release_digest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cusf.crypto.v1.Ripemd160Response.digest)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cusf::common::v1::Hex* temp = _impl_.digest_;
  _impl_.digest_ = nullptr;
  return temp;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NONNULL Ripemd160Response::_internal_mutable_digest() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.digest_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cusf::common::v1::Hex>(GetArena());
    _impl_.digest_ = reinterpret_cast<::cusf::common::v1::Hex*>(p);
  }
  return _impl_.digest_;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NONNULL Ripemd160Response::mutable_digest()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cusf::common::v1::Hex* _msg = _internal_mutable_digest();
  // @@protoc_insertion_point(field_mutable:cusf.crypto.v1.Ripemd160Response.digest)
  return _msg;
}
inline void Ripemd160Response::set_allocated_digest(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.digest_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.digest_ = reinterpret_cast<::cusf::common::v1::Hex*>(value);
  // @@protoc_insertion_point(field_set_allocated:cusf.crypto.v1.Ripemd160Response.digest)
}

// -------------------------------------------------------------------

// Secp256k1SecretKeyToPublicKeyRequest

// .cusf.common.v1.ConsensusHex secret_key = 1 [json_name = "secretKey"];
inline bool Secp256k1SecretKeyToPublicKeyRequest::has_secret_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.secret_key_ != nullptr);
  return value;
}
inline const ::cusf::common::v1::ConsensusHex& Secp256k1SecretKeyToPublicKeyRequest::_internal_secret_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cusf::common::v1::ConsensusHex* p = _impl_.secret_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::cusf::common::v1::ConsensusHex&>(::cusf::common::v1::_ConsensusHex_default_instance_);
}
inline const ::cusf::common::v1::ConsensusHex& Secp256k1SecretKeyToPublicKeyRequest::secret_key() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cusf.crypto.v1.Secp256k1SecretKeyToPublicKeyRequest.secret_key)
  return _internal_secret_key();
}
inline void Secp256k1SecretKeyToPublicKeyRequest::unsafe_arena_set_allocated_secret_key(
    ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.secret_key_);
  }
  _impl_.secret_key_ = reinterpret_cast<::cusf::common::v1::ConsensusHex*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cusf.crypto.v1.Secp256k1SecretKeyToPublicKeyRequest.secret_key)
}
inline ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE Secp256k1SecretKeyToPublicKeyRequest::release_secret_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cusf::common::v1::ConsensusHex* released = _impl_.secret_key_;
  _impl_.secret_key_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE Secp256k1SecretKeyToPublicKeyRequest::unsafe_arena_release_secret_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cusf.crypto.v1.Secp256k1SecretKeyToPublicKeyRequest.secret_key)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cusf::common::v1::ConsensusHex* temp = _impl_.secret_key_;
  _impl_.secret_key_ = nullptr;
  return temp;
}
inline ::cusf::common::v1::ConsensusHex* PROTOBUF_NONNULL Secp256k1SecretKeyToPublicKeyRequest::_internal_mutable_secret_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.secret_key_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cusf::common::v1::ConsensusHex>(GetArena());
    _impl_.secret_key_ = reinterpret_cast<::cusf::common::v1::ConsensusHex*>(p);
  }
  return _impl_.secret_key_;
}
inline ::cusf::common::v1::ConsensusHex* PROTOBUF_NONNULL Secp256k1SecretKeyToPublicKeyRequest::mutable_secret_key()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cusf::common::v1::ConsensusHex* _msg = _internal_mutable_secret_key();
  // @@protoc_insertion_point(field_mutable:cusf.crypto.v1.Secp256k1SecretKeyToPublicKeyRequest.secret_key)
  return _msg;
}
inline void Secp256k1SecretKeyToPublicKeyRequest::set_allocated_secret_key(::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.secret_key_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.secret_key_ = reinterpret_cast<::cusf::common::v1::ConsensusHex*>(value);
  // @@protoc_insertion_point(field_set_allocated:cusf.crypto.v1.Secp256k1SecretKeyToPublicKeyRequest.secret_key)
}

// -------------------------------------------------------------------

// Secp256k1SecretKeyToPublicKeyResponse

// .cusf.common.v1.ConsensusHex public_key = 1 [json_name = "publicKey"];
inline bool Secp256k1SecretKeyToPublicKeyResponse::has_public_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.public_key_ != nullptr);
  return value;
}
inline const ::cusf::common::v1::ConsensusHex& Secp256k1SecretKeyToPublicKeyResponse::_internal_public_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cusf::common::v1::ConsensusHex* p = _impl_.public_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::cusf::common::v1::ConsensusHex&>(::cusf::common::v1::_ConsensusHex_default_instance_);
}
inline const ::cusf::common::v1::ConsensusHex& Secp256k1SecretKeyToPublicKeyResponse::public_key() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cusf.crypto.v1.Secp256k1SecretKeyToPublicKeyResponse.public_key)
  return _internal_public_key();
}
inline void Secp256k1SecretKeyToPublicKeyResponse::unsafe_arena_set_allocated_public_key(
    ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.public_key_);
  }
  _impl_.public_key_ = reinterpret_cast<::cusf::common::v1::ConsensusHex*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cusf.crypto.v1.Secp256k1SecretKeyToPublicKeyResponse.public_key)
}
inline ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE Secp256k1SecretKeyToPublicKeyResponse::release_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cusf::common::v1::ConsensusHex* released = _impl_.public_key_;
  _impl_.public_key_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE Secp256k1SecretKeyToPublicKeyResponse::unsafe_arena_release_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cusf.crypto.v1.Secp256k1SecretKeyToPublicKeyResponse.public_key)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cusf::common::v1::ConsensusHex* temp = _impl_.public_key_;
  _impl_.public_key_ = nullptr;
  return temp;
}
inline ::cusf::common::v1::ConsensusHex* PROTOBUF_NONNULL Secp256k1SecretKeyToPublicKeyResponse::_internal_mutable_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.public_key_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cusf::common::v1::ConsensusHex>(GetArena());
    _impl_.public_key_ = reinterpret_cast<::cusf::common::v1::ConsensusHex*>(p);
  }
  return _impl_.public_key_;
}
inline ::cusf::common::v1::ConsensusHex* PROTOBUF_NONNULL Secp256k1SecretKeyToPublicKeyResponse::mutable_public_key()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cusf::common::v1::ConsensusHex* _msg = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:cusf.crypto.v1.Secp256k1SecretKeyToPublicKeyResponse.public_key)
  return _msg;
}
inline void Secp256k1SecretKeyToPublicKeyResponse::set_allocated_public_key(::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.public_key_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.public_key_ = reinterpret_cast<::cusf::common::v1::ConsensusHex*>(value);
  // @@protoc_insertion_point(field_set_allocated:cusf.crypto.v1.Secp256k1SecretKeyToPublicKeyResponse.public_key)
}

// -------------------------------------------------------------------

// Secp256k1SignRequest

// .cusf.common.v1.Hex message = 1 [json_name = "message"];
inline bool Secp256k1SignRequest::has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.message_ != nullptr);
  return value;
}
inline const ::cusf::common::v1::Hex& Secp256k1SignRequest::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cusf::common::v1::Hex* p = _impl_.message_;
  return p != nullptr ? *p : reinterpret_cast<const ::cusf::common::v1::Hex&>(::cusf::common::v1::_Hex_default_instance_);
}
inline const ::cusf::common::v1::Hex& Secp256k1SignRequest::message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cusf.crypto.v1.Secp256k1SignRequest.message)
  return _internal_message();
}
inline void Secp256k1SignRequest::unsafe_arena_set_allocated_message(
    ::cusf::common::v1::Hex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.message_);
  }
  _impl_.message_ = reinterpret_cast<::cusf::common::v1::Hex*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cusf.crypto.v1.Secp256k1SignRequest.message)
}
inline ::cusf::common::v1::Hex* PROTOBUF_NULLABLE Secp256k1SignRequest::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cusf::common::v1::Hex* released = _impl_.message_;
  _impl_.message_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NULLABLE Secp256k1SignRequest::unsafe_arena_release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cusf.crypto.v1.Secp256k1SignRequest.message)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cusf::common::v1::Hex* temp = _impl_.message_;
  _impl_.message_ = nullptr;
  return temp;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NONNULL Secp256k1SignRequest::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.message_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cusf::common::v1::Hex>(GetArena());
    _impl_.message_ = reinterpret_cast<::cusf::common::v1::Hex*>(p);
  }
  return _impl_.message_;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NONNULL Secp256k1SignRequest::mutable_message()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cusf::common::v1::Hex* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cusf.crypto.v1.Secp256k1SignRequest.message)
  return _msg;
}
inline void Secp256k1SignRequest::set_allocated_message(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.message_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.message_ = reinterpret_cast<::cusf::common::v1::Hex*>(value);
  // @@protoc_insertion_point(field_set_allocated:cusf.crypto.v1.Secp256k1SignRequest.message)
}

// .cusf.common.v1.ConsensusHex secret_key = 2 [json_name = "secretKey"];
inline bool Secp256k1SignRequest::has_secret_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.secret_key_ != nullptr);
  return value;
}
inline const ::cusf::common::v1::ConsensusHex& Secp256k1SignRequest::_internal_secret_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cusf::common::v1::ConsensusHex* p = _impl_.secret_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::cusf::common::v1::ConsensusHex&>(::cusf::common::v1::_ConsensusHex_default_instance_);
}
inline const ::cusf::common::v1::ConsensusHex& Secp256k1SignRequest::secret_key() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cusf.crypto.v1.Secp256k1SignRequest.secret_key)
  return _internal_secret_key();
}
inline void Secp256k1SignRequest::unsafe_arena_set_allocated_secret_key(
    ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.secret_key_);
  }
  _impl_.secret_key_ = reinterpret_cast<::cusf::common::v1::ConsensusHex*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cusf.crypto.v1.Secp256k1SignRequest.secret_key)
}
inline ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE Secp256k1SignRequest::release_secret_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cusf::common::v1::ConsensusHex* released = _impl_.secret_key_;
  _impl_.secret_key_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE Secp256k1SignRequest::unsafe_arena_release_secret_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cusf.crypto.v1.Secp256k1SignRequest.secret_key)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cusf::common::v1::ConsensusHex* temp = _impl_.secret_key_;
  _impl_.secret_key_ = nullptr;
  return temp;
}
inline ::cusf::common::v1::ConsensusHex* PROTOBUF_NONNULL Secp256k1SignRequest::_internal_mutable_secret_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.secret_key_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cusf::common::v1::ConsensusHex>(GetArena());
    _impl_.secret_key_ = reinterpret_cast<::cusf::common::v1::ConsensusHex*>(p);
  }
  return _impl_.secret_key_;
}
inline ::cusf::common::v1::ConsensusHex* PROTOBUF_NONNULL Secp256k1SignRequest::mutable_secret_key()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::cusf::common::v1::ConsensusHex* _msg = _internal_mutable_secret_key();
  // @@protoc_insertion_point(field_mutable:cusf.crypto.v1.Secp256k1SignRequest.secret_key)
  return _msg;
}
inline void Secp256k1SignRequest::set_allocated_secret_key(::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.secret_key_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.secret_key_ = reinterpret_cast<::cusf::common::v1::ConsensusHex*>(value);
  // @@protoc_insertion_point(field_set_allocated:cusf.crypto.v1.Secp256k1SignRequest.secret_key)
}

// -------------------------------------------------------------------

// Secp256k1SignResponse

// .cusf.common.v1.Hex signature = 1 [json_name = "signature"];
inline bool Secp256k1SignResponse::has_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signature_ != nullptr);
  return value;
}
inline const ::cusf::common::v1::Hex& Secp256k1SignResponse::_internal_signature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cusf::common::v1::Hex* p = _impl_.signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::cusf::common::v1::Hex&>(::cusf::common::v1::_Hex_default_instance_);
}
inline const ::cusf::common::v1::Hex& Secp256k1SignResponse::signature() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cusf.crypto.v1.Secp256k1SignResponse.signature)
  return _internal_signature();
}
inline void Secp256k1SignResponse::unsafe_arena_set_allocated_signature(
    ::cusf::common::v1::Hex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.signature_);
  }
  _impl_.signature_ = reinterpret_cast<::cusf::common::v1::Hex*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cusf.crypto.v1.Secp256k1SignResponse.signature)
}
inline ::cusf::common::v1::Hex* PROTOBUF_NULLABLE Secp256k1SignResponse::release_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cusf::common::v1::Hex* released = _impl_.signature_;
  _impl_.signature_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NULLABLE Secp256k1SignResponse::unsafe_arena_release_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cusf.crypto.v1.Secp256k1SignResponse.signature)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cusf::common::v1::Hex* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
  return temp;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NONNULL Secp256k1SignResponse::_internal_mutable_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.signature_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cusf::common::v1::Hex>(GetArena());
    _impl_.signature_ = reinterpret_cast<::cusf::common::v1::Hex*>(p);
  }
  return _impl_.signature_;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NONNULL Secp256k1SignResponse::mutable_signature()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cusf::common::v1::Hex* _msg = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:cusf.crypto.v1.Secp256k1SignResponse.signature)
  return _msg;
}
inline void Secp256k1SignResponse::set_allocated_signature(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.signature_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.signature_ = reinterpret_cast<::cusf::common::v1::Hex*>(value);
  // @@protoc_insertion_point(field_set_allocated:cusf.crypto.v1.Secp256k1SignResponse.signature)
}

// -------------------------------------------------------------------

// Secp256k1VerifyRequest

// .cusf.common.v1.Hex message = 1 [json_name = "message"];
inline bool Secp256k1VerifyRequest::has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.message_ != nullptr);
  return value;
}
inline const ::cusf::common::v1::Hex& Secp256k1VerifyRequest::_internal_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cusf::common::v1::Hex* p = _impl_.message_;
  return p != nullptr ? *p : reinterpret_cast<const ::cusf::common::v1::Hex&>(::cusf::common::v1::_Hex_default_instance_);
}
inline const ::cusf::common::v1::Hex& Secp256k1VerifyRequest::message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cusf.crypto.v1.Secp256k1VerifyRequest.message)
  return _internal_message();
}
inline void Secp256k1VerifyRequest::unsafe_arena_set_allocated_message(
    ::cusf::common::v1::Hex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.message_);
  }
  _impl_.message_ = reinterpret_cast<::cusf::common::v1::Hex*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cusf.crypto.v1.Secp256k1VerifyRequest.message)
}
inline ::cusf::common::v1::Hex* PROTOBUF_NULLABLE Secp256k1VerifyRequest::release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cusf::common::v1::Hex* released = _impl_.message_;
  _impl_.message_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NULLABLE Secp256k1VerifyRequest::unsafe_arena_release_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cusf.crypto.v1.Secp256k1VerifyRequest.message)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::cusf::common::v1::Hex* temp = _impl_.message_;
  _impl_.message_ = nullptr;
  return temp;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NONNULL Secp256k1VerifyRequest::_internal_mutable_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.message_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cusf::common::v1::Hex>(GetArena());
    _impl_.message_ = reinterpret_cast<::cusf::common::v1::Hex*>(p);
  }
  return _impl_.message_;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NONNULL Secp256k1VerifyRequest::mutable_message()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::cusf::common::v1::Hex* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:cusf.crypto.v1.Secp256k1VerifyRequest.message)
  return _msg;
}
inline void Secp256k1VerifyRequest::set_allocated_message(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.message_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.message_ = reinterpret_cast<::cusf::common::v1::Hex*>(value);
  // @@protoc_insertion_point(field_set_allocated:cusf.crypto.v1.Secp256k1VerifyRequest.message)
}

// .cusf.common.v1.Hex signature = 2 [json_name = "signature"];
inline bool Secp256k1VerifyRequest::has_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signature_ != nullptr);
  return value;
}
inline const ::cusf::common::v1::Hex& Secp256k1VerifyRequest::_internal_signature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cusf::common::v1::Hex* p = _impl_.signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::cusf::common::v1::Hex&>(::cusf::common::v1::_Hex_default_instance_);
}
inline const ::cusf::common::v1::Hex& Secp256k1VerifyRequest::signature() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cusf.crypto.v1.Secp256k1VerifyRequest.signature)
  return _internal_signature();
}
inline void Secp256k1VerifyRequest::unsafe_arena_set_allocated_signature(
    ::cusf::common::v1::Hex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.signature_);
  }
  _impl_.signature_ = reinterpret_cast<::cusf::common::v1::Hex*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cusf.crypto.v1.Secp256k1VerifyRequest.signature)
}
inline ::cusf::common::v1::Hex* PROTOBUF_NULLABLE Secp256k1VerifyRequest::release_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cusf::common::v1::Hex* released = _impl_.signature_;
  _impl_.signature_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NULLABLE Secp256k1VerifyRequest::unsafe_arena_release_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cusf.crypto.v1.Secp256k1VerifyRequest.signature)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::cusf::common::v1::Hex* temp = _impl_.signature_;
  _impl_.signature_ = nullptr;
  return temp;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NONNULL Secp256k1VerifyRequest::_internal_mutable_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.signature_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cusf::common::v1::Hex>(GetArena());
    _impl_.signature_ = reinterpret_cast<::cusf::common::v1::Hex*>(p);
  }
  return _impl_.signature_;
}
inline ::cusf::common::v1::Hex* PROTOBUF_NONNULL Secp256k1VerifyRequest::mutable_signature()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::cusf::common::v1::Hex* _msg = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:cusf.crypto.v1.Secp256k1VerifyRequest.signature)
  return _msg;
}
inline void Secp256k1VerifyRequest::set_allocated_signature(::cusf::common::v1::Hex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.signature_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.signature_ = reinterpret_cast<::cusf::common::v1::Hex*>(value);
  // @@protoc_insertion_point(field_set_allocated:cusf.crypto.v1.Secp256k1VerifyRequest.signature)
}

// .cusf.common.v1.ConsensusHex public_key = 3 [json_name = "publicKey"];
inline bool Secp256k1VerifyRequest::has_public_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.public_key_ != nullptr);
  return value;
}
inline const ::cusf::common::v1::ConsensusHex& Secp256k1VerifyRequest::_internal_public_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::cusf::common::v1::ConsensusHex* p = _impl_.public_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::cusf::common::v1::ConsensusHex&>(::cusf::common::v1::_ConsensusHex_default_instance_);
}
inline const ::cusf::common::v1::ConsensusHex& Secp256k1VerifyRequest::public_key() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:cusf.crypto.v1.Secp256k1VerifyRequest.public_key)
  return _internal_public_key();
}
inline void Secp256k1VerifyRequest::unsafe_arena_set_allocated_public_key(
    ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.public_key_);
  }
  _impl_.public_key_ = reinterpret_cast<::cusf::common::v1::ConsensusHex*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cusf.crypto.v1.Secp256k1VerifyRequest.public_key)
}
inline ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE Secp256k1VerifyRequest::release_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cusf::common::v1::ConsensusHex* released = _impl_.public_key_;
  _impl_.public_key_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE Secp256k1VerifyRequest::unsafe_arena_release_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:cusf.crypto.v1.Secp256k1VerifyRequest.public_key)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::cusf::common::v1::ConsensusHex* temp = _impl_.public_key_;
  _impl_.public_key_ = nullptr;
  return temp;
}
inline ::cusf::common::v1::ConsensusHex* PROTOBUF_NONNULL Secp256k1VerifyRequest::_internal_mutable_public_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.public_key_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::cusf::common::v1::ConsensusHex>(GetArena());
    _impl_.public_key_ = reinterpret_cast<::cusf::common::v1::ConsensusHex*>(p);
  }
  return _impl_.public_key_;
}
inline ::cusf::common::v1::ConsensusHex* PROTOBUF_NONNULL Secp256k1VerifyRequest::mutable_public_key()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::cusf::common::v1::ConsensusHex* _msg = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:cusf.crypto.v1.Secp256k1VerifyRequest.public_key)
  return _msg;
}
inline void Secp256k1VerifyRequest::set_allocated_public_key(::cusf::common::v1::ConsensusHex* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.public_key_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.public_key_ = reinterpret_cast<::cusf::common::v1::ConsensusHex*>(value);
  // @@protoc_insertion_point(field_set_allocated:cusf.crypto.v1.Secp256k1VerifyRequest.public_key)
}

// -------------------------------------------------------------------

// Secp256k1VerifyResponse

// bool valid = 1 [json_name = "valid"];
inline void Secp256k1VerifyResponse::clear_valid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.valid_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool Secp256k1VerifyResponse::valid() const {
  // @@protoc_insertion_point(field_get:cusf.crypto.v1.Secp256k1VerifyResponse.valid)
  return _internal_valid();
}
inline void Secp256k1VerifyResponse::set_valid(bool value) {
  _internal_set_valid(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:cusf.crypto.v1.Secp256k1VerifyResponse.valid)
}
inline bool Secp256k1VerifyResponse::_internal_valid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.valid_;
}
inline void Secp256k1VerifyResponse::_internal_set_valid(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.valid_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace crypto
}  // namespace cusf


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cusf_2fcrypto_2fv1_2fcrypto_2eproto_2epb_2eh
